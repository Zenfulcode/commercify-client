// Code generated by tygo. DO NOT EDIT.
// Generated types for Commercify API
// Do not edit this file directly

//////////
// source: category.go

/**
 * CategoryDTO represents a category in the system
 */
export interface CategoryDTO {
  id: number /* uint */;
  name: string;
  description: string;
  parent_id?: number /* uint */;
  created_at: string;
  updated_at: string;
}

//////////
// source: checkout.go

/**
 * CheckoutDTO represents a checkout session in the system
 */
export interface CheckoutDTO {
  id: number /* uint */;
  user_id?: number /* uint */;
  session_id?: string;
  items: CheckoutItemDTO[];
  status: string;
  shipping_address: AddressDTO;
  billing_address: AddressDTO;
  shipping_method_id: number /* uint */;
  shipping_option?: ShippingOptionDTO;
  payment_provider?: string;
  total_amount: number /* float64 */;
  shipping_cost: number /* float64 */;
  total_weight: number /* float64 */;
  customer_details: CustomerDetailsDTO;
  currency: string;
  discount_code?: string;
  discount_amount: number /* float64 */;
  final_amount: number /* float64 */;
  applied_discount?: AppliedDiscountDTO;
  last_activity_at: string;
  expires_at: string;
}
/**
 * CheckoutItemDTO represents an item in a checkout
 */
export interface CheckoutItemDTO {
  id: number /* uint */;
  product_id: number /* uint */;
  variant_id: number /* uint */;
  product_name: string;
  variant_name?: string;
  image_url?: string;
  sku: string;
  price: number /* float64 */;
  quantity: number /* int */;
  weight: number /* float64 */;
  subtotal: number /* float64 */;
  created_at: string;
  updated_at: string;
}
/**
 * CardDetailsDTO represents card details for payment processing
 */
export interface CardDetailsDTO {
  card_number: string;
  expiry_month: number /* int */;
  expiry_year: number /* int */;
  cvv: string;
  cardholder_name: string;
  token?: string; // Optional token for saved cards
}

//////////
// source: common.go

/**
 * AddressDTO represents a shipping or billing address
 */
export interface AddressDTO {
  address_line1: string;
  address_line2: string;
  city: string;
  state: string;
  postal_code: string;
  country: string;
}
/**
 * CustomerDetailsDTO represents customer information for a checkout
 */
export interface CustomerDetailsDTO {
  email: string;
  phone: string;
  full_name: string;
}
/**
 * ErrorResponse represents an error response
 */
export interface ErrorResponse {
  error: string;
}

//////////
// source: currency.go

/**
 * CurrencyDTO represents a currency entity
 */
export interface CurrencyDTO {
  code: string;
  name: string;
  symbol: string;
  exchange_rate: number /* float64 */;
  is_enabled: boolean;
  is_default: boolean;
  created_at: string;
  updated_at: string;
}

//////////
// source: discount.go

/**
 * DiscountDTO represents a discount in the system
 */
export interface DiscountDTO {
  id: number /* uint */;
  code: string;
  type: string;
  method: string;
  value: number /* float64 */;
  min_order_value: number /* float64 */;
  max_discount_value: number /* float64 */;
  product_ids?: number /* uint */[];
  category_ids?: number /* uint */[];
  start_date: string;
  end_date: string;
  usage_limit: number /* int */;
  current_usage: number /* int */;
  active: boolean;
  created_at: string;
  updated_at: string;
}
/**
 * AppliedDiscountDTO represents an applied discount in a checkout
 */
export interface AppliedDiscountDTO {
  id: number /* uint */;
  code: string;
  type: string;
  method: string;
  value: number /* float64 */;
  amount: number /* float64 */;
}

//////////
// source: order.go

/**
 * OrderDTO represents an order in the system
 */
export interface OrderDTO {
  id: number /* uint */;
  order_number: string;
  user_id: number /* uint */;
  checkout_id: string;
  items: OrderItemDTO[];
  status: OrderStatus;
  payment_status: PaymentStatus;
  total_amount: number /* float64 */; // Subtotal (items only)
  shipping_cost: number /* float64 */; // Shipping cost
  discount_amount: number /* float64 */; // Discount applied amount
  final_amount: number /* float64 */; // Total including shipping and discounts
  currency: string;
  shipping_address: AddressDTO;
  billing_address: AddressDTO;
  shipping_details: ShippingOptionDTO;
  discount_details?: AppliedDiscountDTO;
  payment_transactions?: PaymentTransactionDTO[];
  customer: CustomerDetailsDTO;
  action_required: boolean; // Indicates if action is needed (e.g., payment)
  action_url?: string; // URL for payment or order actions
  created_at: string;
  updated_at: string;
}
export interface OrderSummaryDTO {
  id: number /* uint */;
  order_number: string;
  checkout_id: string;
  user_id: number /* uint */;
  customer: CustomerDetailsDTO;
  status: OrderStatus;
  payment_status: PaymentStatus;
  total_amount: number /* float64 */; // Subtotal (items only)
  shipping_cost: number /* float64 */; // Shipping cost
  discount_amount: number /* float64 */; // Discount applied amount
  final_amount: number /* float64 */; // Total including shipping and discounts
  order_lines_amount: number /* int */;
  currency: string;
  created_at: string;
  updated_at: string;
}
export interface PaymentDetails {
  payment_id: string;
  provider: PaymentProvider;
  method: PaymentMethod;
  status: string;
  captured: boolean;
  refunded: boolean;
}
/**
 * OrderItemDTO represents an item in an order
 */
export interface OrderItemDTO {
  id: number /* uint */;
  order_id: number /* uint */;
  product_id: number /* uint */;
  variant_id?: number /* uint */;
  sku: string;
  product_name: string;
  variant_name: string;
  quantity: number /* int */;
  unit_price: number /* float64 */;
  total_price: number /* float64 */;
  image_url: string;
  created_at: string;
  updated_at: string;
}
/**
 * PaymentMethod represents the payment method used for an order
 */
export type PaymentMethod = string;
export const PaymentMethodCard: PaymentMethod = "credit_card";
export const PaymentMethodWallet: PaymentMethod = "wallet";
/**
 * PaymentProvider represents the payment provider used for an order
 */
export type PaymentProvider = string;
export const PaymentProviderStripe: PaymentProvider = "stripe";
export const PaymentProviderMobilePay: PaymentProvider = "mobilepay";
/**
 * OrderStatus represents the status of an order
 */
export type OrderStatus = string;
export const OrderStatusPending: OrderStatus = "pending";
export const OrderStatusPaid: OrderStatus = "paid";
export const OrderStatusShipped: OrderStatus = "shipped";
export const OrderStatusCancelled: OrderStatus = "cancelled";
export const OrderStatusCompleted: OrderStatus = "completed";
/**
 * PaymentStatus represents the status of a payment
 */
export type PaymentStatus = string;
export const PaymentStatusPending: PaymentStatus = "pending";
export const PaymentStatusAuthorized: PaymentStatus = "authorized";
export const PaymentStatusCaptured: PaymentStatus = "captured";
export const PaymentStatusRefunded: PaymentStatus = "refunded";
export const PaymentStatusCancelled: PaymentStatus = "cancelled";
export const PaymentStatusFailed: PaymentStatus = "failed";
/**
 * PaymentTransactionDTO represents a payment transaction
 */
export interface PaymentTransactionDTO {
  id: number /* uint */;
  transaction_id: string;
  external_id?: string;
  type: TransactionType;
  status: TransactionStatus;
  amount: number /* float64 */;
  currency: string;
  provider: string;
  created_at: string;
  updated_at: string;
}
/**
 * TransactionType represents the type of payment transaction
 */
export type TransactionType = string;
export const TransactionTypeAuthorize: TransactionType = "authorize";
export const TransactionTypeCapture: TransactionType = "capture";
export const TransactionTypeRefund: TransactionType = "refund";
export const TransactionTypeCancel: TransactionType = "cancel";
/**
 * TransactionStatus represents the status of a payment transaction
 */
export type TransactionStatus = string;
export const TransactionStatusSuccessful: TransactionStatus = "successful";
export const TransactionStatusFailed: TransactionStatus = "failed";
export const TransactionStatusPending: TransactionStatus = "pending";

//////////
// source: product.go

/**
 * ProductDTO represents a product in the system
 */
export interface ProductDTO {
  id: number /* uint */;
  name: string;
  description: string;
  currency: string;
  price: number /* float64 */; // Default variant price in given currency
  sku: string; // Default variant SKU
  total_stock: number /* int */; // Total stock across all variants
  category: string;
  category_id?: number /* uint */;
  images: string[];
  has_variants: boolean;
  active: boolean;
  variants?: VariantDTO[];
  created_at: string;
  updated_at: string;
}
/**
 * VariantDTO represents a product variant
 */
export interface VariantDTO {
  id: number /* uint */;
  product_id: number /* uint */;
  variant_name: string;
  sku: string;
  stock: number /* int */;
  attributes: { [key: string]: string };
  images: string[];
  is_default: boolean;
  weight: number /* float64 */;
  price: number /* float64 */;
  currency: string;
  created_at: string;
  updated_at: string;
}

//////////
// source: shipping.go

/**
 * ShippingMethodDetailDTO represents a shipping method in the system with full details
 */
export interface ShippingMethodDetailDTO {
  id: number /* uint */;
  name: string;
  description: string;
  estimated_delivery_days: number /* int */;
  active: boolean;
  created_at: string;
  updated_at: string;
}
/**
 * ShippingZoneDTO represents a shipping zone in the system
 */
export interface ShippingZoneDTO {
  id: number /* uint */;
  name: string;
  description: string;
  countries: string[];
  active: boolean;
  created_at: string;
  updated_at: string;
}
/**
 * ShippingRateDTO represents a shipping rate in the system
 */
export interface ShippingRateDTO {
  id: number /* uint */;
  shipping_method_id: number /* uint */;
  shipping_method?: ShippingMethodDetailDTO;
  shipping_zone_id: number /* uint */;
  shipping_zone?: ShippingZoneDTO;
  base_rate: number /* float64 */;
  min_order_value: number /* float64 */;
  free_shipping_threshold: number /* float64 */;
  weight_based_rates?: WeightBasedRateDTO[];
  value_based_rates?: ValueBasedRateDTO[];
  active: boolean;
  created_at: string;
  updated_at: string;
}
/**
 * WeightBasedRateDTO represents a weight-based rate in the system
 */
export interface WeightBasedRateDTO {
  id: number /* uint */;
  shipping_rate_id: number /* uint */;
  min_weight: number /* float64 */;
  max_weight: number /* float64 */;
  rate: number /* float64 */;
  created_at: string;
  updated_at: string;
}
/**
 * ValueBasedRateDTO represents a value-based rate in the system
 */
export interface ValueBasedRateDTO {
  id: number /* uint */;
  shipping_rate_id: number /* uint */;
  min_order_value: number /* float64 */;
  max_order_value: number /* float64 */;
  rate: number /* float64 */;
  created_at: string;
  updated_at: string;
}
/**
 * ShippingOptionDTO represents a shipping option with calculated cost
 */
export interface ShippingOptionDTO {
  shipping_rate_id: number /* uint */;
  shipping_method_id: number /* uint */;
  name: string;
  description: string;
  estimated_delivery_days: number /* int */;
  cost: number /* float64 */;
  free_shipping: boolean;
}

//////////
// source: user.go

/**
 * UserDTO represents a user in the system
 */
export interface UserDTO {
  id: number /* uint */;
  email: string;
  first_name: string;
  last_name: string;
  role: string;
  created_at: string;
  updated_at: string;
}
